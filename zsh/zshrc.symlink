# shortcut to this dotfiles path is $ZSH_DOT
export ZSH_DOT=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/code

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
#
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH_DOT/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

source $ZSH/oh-my-zsh.sh

# this is to use powerline in ZSH prompt
# source /usr/lib/python3.5/site-packages/powerline/bindings/zsh/powerline.zsh
# source /usr/local/lib/python2.7/dist-packages/powerline/bindings/zsh/powerline.zsh
# source /usr/lib/python3.6/site-packages/powerline/bindings/zsh/powerline.zsh

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /home/chrcoe/.nvm/versions/node/v8.2.1/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /home/chrcoe/.nvm/versions/node/v8.2.1/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /home/chrcoe/.nvm/versions/node/v8.2.1/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . /home/chrcoe/.nvm/versions/node/v8.2.1/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh

eval "$(rbenv init -)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# all go binaries are dropped here ..
export GOBIN=$HOME/code/go/bin

# set vi bindings for shell
bindkey -v
bindkey '^R' history-incremental-search-backward

if [[ -n $SSH_CONNECTION ]]; then
    echo "you are in an SSH connection"
else
    echo "you are not in an SSH connection"
fi

# # add ssh-agent
# eval `ssh-agent`
# # add all onshift related keys to the agent
# ssh-add -K ~/.ssh/onshift*
