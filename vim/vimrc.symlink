filetype off
execute pathogen#infect()
execute pathogen#helptags()

syntax on
filetype plugin indent on

set exrc
set secure

"----------------------------------------------------------------
" neocomplete settings

" from here: https://github.com/Shougo/neocomplete.vim/issues/302
let g:neocomplete#enable_at_startup = 1
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

" let g:neocomplete#enable_at_startup = 1
" let g:jedi#popup_select_first = 0
" let g:neocomplete#enable_auto_select = 0
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#completions_enabled=0

"----------------------------------------------------------------
" NERDTree settings
map <C-E> :NERDTreeToggle<CR>

"----------------------------------------------------------------
" Tagbar settings
if has('win64') || has('win32') || has('win32unix')
    nmap <leader>l :echom "****Tagbar not setup on Windows yet in this config!****"<CR>
else
    let g:tagbar_autofocus = 1
    nmap <leader>l :TagbarToggle<CR>
endif

"----------------------------------------------------------------
" CTRL-P cmd settings
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'

"----------------------------------------------------------------
" Indent guides settings
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 1
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=brblue   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=brcyan ctermbg=4

"----------------------------------------------------------------
" AutoFormat settings 
" must have astyle installed for C/C++/Java
" must have pep8 installed for Python
noremap <C-F> :Autoformat<CR>

"----------------------------------------------------------------
" Distraction free (Goyo)
" nnoremap <leader>df :Goyo<CR>

"----------------------------------------------------------------
" vim-airline
"
let g:airline_powerline_fonts = 1
set ttimeoutlen=50
set laststatus=2
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" "----------------------------------------------------------------
" " tasklist (open with <leader> t or call :TaskList<CR>)
" let g:tlWindowPosition = 1 " open at bottom
" let g:tlTokenList = "FIXME TODO DEBUG ADDFEATURE"
" let g:tlRememberPosition = 1 " try to find most recent location

"----------------------------------------------------------------
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 0
" let g:pymode_doc_key = 'K'

" Run python code
let g:pymode_run = 0
" let g:pymode_run_bind = '<leader>r'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"

" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'
" 
" " syntax highlighting
" let g:pymode_syntax = 1
" let g:pymode_syntax_all = 1
" let g:pymode_syntax_indent_errors = g:pymode_syntax_all
" let g:pymode_syntax_space_errors = g:pymode_syntax_all
" 
" " Don't autofold code
let g:pymode_folding = 0
" 
" 
"----------------------------------------------------------------
" Jedi-vim
"
" let g:jedi#rename_command = "<leader>r"  
let g:pymode_rope_completion = 0



set background=dark
colorscheme solarized
set colorcolumn=80
highlight ColorColumn ctermbg=black

if has('gui_running')
    set guifont=Terminus\ 12
    set lines=999 columns=120
    highlight ColorColumn ctermbg=darkgrey
endif

set number

set tabstop=4
"set softtabstop=4
set shiftwidth=4
"set noexpandtab
set expandtab

set nowrap
